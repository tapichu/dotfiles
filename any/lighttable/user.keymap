;; User keymap
;; -----------------------------
;; Keymaps are stored as a set of diffs that are merged together together
;; to create the final set of keys. You can modify these diffs to either add
;; or subtract bindings.
;;
;; Like behaviors, keys are bound by tag. When objects with those tags are active
;; the key bindings are live. Keys can be bound to any number of Light Table commands,
;; allowing you the flexibility to execute multiple operations together. To see a list
;; of all the commands you can execute, start typing a word related to the thing you
;; want to do in between the square brackets (e.g. type "editor").

{:+ {:app {"cmd-shift-w" [:workspace.show]
           "cmd-shift-c" [:toggle-console]
           "cmd-shift-x" [:show-connect]
           "cmd-shift-t" [:tabset.new]
           "cmd-shift-r" [:tabset.close]
           "ctrl-m" [:window.fullscreen]
           "ctrl-t" [:tabset.new]
           "ctrl-h" [:tabset.prev]
           "ctrl-l" [:tabset.next]
           "ctrl-shift-h" [:tabs.move-prev-tabset]
           "ctrl-shift-l" [:tabs.move-next-tabset]}

     :editor {"alt-w" [:editor.watch.watch-selection]
              "alt-shift-w" [:editor.watch.unwatch]}

     :editor.clj {"cmd-e" [(:eval.custom "(macroexpand-1 '__SELECTION__)" {:result-type :inline})]
                  "alt-m" [(:editor.watch.custom-watch-selection
                            "(let [start (System/currentTimeMillis)
                                   res (do __SELECTION__)]
                               __|(str (- (System/currentTimeMillis) start) \" ms\")|__
                               res)" {:class "timed" :verbatim true})]}

     :editor.keys.vim.normal {"ctrl-d" [:passthrough]
                              ">" [:paredit.grow.right]
                              "alt-shift-." [:paredit.shrink.right]
                              "<" [:paredit.grow.left]
                              "alt-shift-," [:paredit.shrink.left]}

     :editor.keys.vim.insert {"ctrl-n" [:auto-complete]}}}
